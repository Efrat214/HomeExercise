{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/1/Desktop/\\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/corona-details/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Chart from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nexport class GraphComponent {\n  ngOnInit() {\n    this.createChart();\n  }\n  createChart() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://localhost:7063/api/Patients/positivecases');\n      const data = yield response.json();\n      // Convert the dictionary to an array of objects\n      const counts = Object.entries(data).map(([date, count]) => ({\n        date: new Date(date),\n        count: count\n      }));\n      // Sort the array by date\n      counts.sort((a, b) => a.date.getTime() - b.date.getTime());\n      // Use the last 30 days of data\n      const last30Days = counts.slice(-30);\n      // Extract the dates and counts\n      const dates = last30Days.map(obj => obj.date);\n      const countsArr = last30Days.map(obj => obj.count);\n      // Create the chart\n      _this.chart = new Chart(\"MyChart\", {\n        type: 'line',\n        data: {\n          labels: dates,\n          datasets: [{\n            label: 'Number of positive cases',\n            data: countsArr,\n            borderColor: 'rgb(255, 99, 132)',\n            fill: false\n          }]\n        },\n        options: {\n          aspectRatio: 2.5,\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day'\n              }\n            },\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    })();\n  }\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n}\nGraphComponent.ɵfac = function GraphComponent_Factory(t) {\n  return new (t || GraphComponent)();\n};\nGraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GraphComponent,\n  selectors: [[\"app-graph\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[1, \"chart-container\"], [\"id\", \"MyChart\"]],\n  template: function GraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"canvas\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.chart);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,OAAOA,KAAK,MAAM,eAAe;;AAOjC,OAAM,MAAOC,cAAc;EAGzBC,QAAQ;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEMA,WAAW;IAAA;IAAA;MACf,MAAMC,QAAQ,SAASC,KAAK,CAAC,mDAAmD,CAAC;MACjF,MAAMC,IAAI,SAASF,QAAQ,CAACG,IAAI,EAAE;MAElC;MACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,OAAO,CAACJ,IAAI,CAAC,CAACK,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC,MAAM;QAC1DD,IAAI,EAAE,IAAIE,IAAI,CAACF,IAAI,CAAC;QACpBC,KAAK,EAAEA;OACR,CAAC,CAAC;MAEH;MACAL,MAAM,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACJ,IAAI,CAACM,OAAO,EAAE,GAAGD,CAAC,CAACL,IAAI,CAACM,OAAO,EAAE,CAAC;MAE1D;MACA,MAAMC,UAAU,GAAGX,MAAM,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC;MAEpC;MACA,MAAMC,KAAK,GAAGF,UAAU,CAACR,GAAG,CAACW,GAAG,IAAIA,GAAG,CAACV,IAAI,CAAC;MAC7C,MAAMW,SAAS,GAAGJ,UAAU,CAACR,GAAG,CAACW,GAAG,IAAIA,GAAG,CAACT,KAAK,CAAC;MAElD;MACA,KAAI,CAACW,KAAK,GAAG,IAAIxB,KAAK,CAAC,SAAS,EAAE;QAChCyB,IAAI,EAAE,MAAM;QACZnB,IAAI,EAAE;UACJoB,MAAM,EAAEL,KAAK;UACbM,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,0BAA0B;YACjCtB,IAAI,EAAEiB,SAAS;YACfM,WAAW,EAAE,mBAAmB;YAChCC,IAAI,EAAE;WACP;SACF;QACDC,OAAO,EAAE;UACPC,WAAW,EAAE,GAAG;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDT,IAAI,EAAE,MAAM;cACZU,IAAI,EAAE;gBACJC,IAAI,EAAE;;aAET;YACDC,CAAC,EAAE;cACDC,WAAW,EAAE;;;;OAIpB,CAAC;IAAC;EACL;EAEAC,WAAW;IACT,IAAI,IAAI,CAACf,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACgB,OAAO,EAAE;;EAExB;;AA5DWvC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAwC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BC,8BAA6B;MACFA,YAAW;MAAAA,iBAAS;;;MAApBA,eAAW;MAAXA,+BAAW","names":["Chart","GraphComponent","ngOnInit","createChart","response","fetch","data","json","counts","Object","entries","map","date","count","Date","sort","a","b","getTime","last30Days","slice","dates","obj","countsArr","chart","type","labels","datasets","label","borderColor","fill","options","aspectRatio","scales","x","time","unit","y","beginAtZero","ngOnDestroy","destroy","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\1\\Desktop\\תכנות\\עבודה\\corona-details\\src\\app\\graph\\graph.component.ts","C:\\Users\\1\\Desktop\\תכנות\\עבודה\\corona-details\\src\\app\\graph\\graph.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport Chart from 'chart.js/auto';\n\n@Component({\n  selector: 'app-graph',\n  templateUrl: './graph.component.html',\n  styleUrls: ['./graph.component.css']\n})\nexport class GraphComponent {\n\n  public chart: any\n  ngOnInit(): void {\n    this.createChart();\n  }\n  constructor()\n  async createChart() {\n    const response = await fetch('https://localhost:7063/api/Patients/positivecases');\n    const data = await response.json();\n\n    // Convert the dictionary to an array of objects\n    const counts = Object.entries(data).map(([date, count]) => ({\n      date: new Date(date),\n      count: count\n    }));\n\n    // Sort the array by date\n    counts.sort((a, b) => a.date.getTime() - b.date.getTime());\n\n    // Use the last 30 days of data\n    const last30Days = counts.slice(-30);\n\n    // Extract the dates and counts\n    const dates = last30Days.map(obj => obj.date);\n    const countsArr = last30Days.map(obj => obj.count);\n\n    // Create the chart\n    this.chart = new Chart(\"MyChart\", {\n      type: 'line', //this denotes tha type of chart\n      data: {\n        labels: dates,\n        datasets: [{\n          label: 'Number of positive cases',\n          data: countsArr,\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false\n        }]\n      },\n      options: {\n        aspectRatio: 2.5,\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            }\n          },\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n  // createChart(){  \n  //   this.chart = new Chart(\"MyChart\", {\n  //     type: 'line', //this denotes tha type of chart\n\n  //     data: {// values on X-Axis\n  //       labels: ['2022-05-10', '2022-05-11', '2022-05-12','2022-05-13',\n\t// \t\t\t\t\t\t\t '2022-05-14', '2022-05-15', '2022-05-16','2022-05-17', ], \n\t//        datasets: [\n  //         {\n  //           label: \"active seeks\",\n  //           data: ['467','576', '572', '79', '92',\n\t// \t\t\t\t\t\t\t '574', '573', '576'],\n  //           backgroundColor: 'lightblue'\n  //         }\n  //       ]\n  //     },\n  //     options: {\n  //       aspectRatio:2.5\n  //     }\n      \n  //   });\n  // }\n}\n","<div class=\"chart-container\">\n    <canvas  id=\"MyChart\" >{{ chart }}</canvas>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}