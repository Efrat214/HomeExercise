{"ast":null,"code":"import _defineProperty from \"C:/Users/1/Desktop/\\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/corona-details/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/*!\n * Chart.js v4.3.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nclass PieController extends DoughnutController {}\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nclass ScatterController extends DatasetController {\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    _defineProperty(this, \"options\", void 0);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  constructor() {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"$animations\", void 0);\n  }\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.3.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nclass Chart {\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"circumference\", void 0);\n    _defineProperty(this, \"endAngle\", void 0);\n    _defineProperty(this, \"fullCircles\", void 0);\n    _defineProperty(this, \"innerRadius\", void 0);\n    _defineProperty(this, \"outerRadius\", void 0);\n    _defineProperty(this, \"pixelMargin\", void 0);\n    _defineProperty(this, \"startAngle\", void 0);\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\n_defineProperty(ArcElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash'\n});\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"parsed\", void 0);\n    _defineProperty(this, \"skip\", void 0);\n    _defineProperty(this, \"stop\", void 0);\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n_defineProperty(PointElement, \"id\", 'point');\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["r","requestAnimFrame","a","resolve","e","effects","c","color","i","isObject","d","defaults","b","isArray","v","valueOrDefault","u","unlistenArrayEvents","l","listenArrayEvents","f","resolveObjectKey","g","isNumberFinite","h","defined","s","sign","j","createContext","k","isNullOrUndef","_","_arrayUnique","t","toRadians","m","toPercentage","n","toDimension","T","TAU","o","formatNumber","p","_angleBetween","H","HALF_PI","P","PI","q","_getStartAndCountOfVisiblePoints","w","_scaleRangesChanged","x","isNumber","y","_parseObjectDataRadialScale","z","getRelativePosition","A","_rlookupByKey","B","_lookupByKey","C","_isPointInArea","D","getAngleFromPoint","E","toPadding","F","each","G","getMaximumSize","I","_getParentNode","J","readUsedSize","K","supportsEventListenerOptions","L","throttled","M","_isDomSupported","N","_factorize","O","finiteOrDefault","Q","callback","R","_addGrace","S","_limitValue","U","toDegrees","V","_measureText","W","_int16Range","X","_alignPixel","Y","clipArea","Z","renderText","$","unclipArea","a0","toFont","a1","_toLeftRightCenter","a2","_alignStartEnd","a3","overrides","a4","merge","a5","_capitalize","a6","descriptors","a7","isFunction","a8","_attachContext","a9","_createResolver","aa","_descriptors","ab","mergeIf","ac","uid","ad","debounce","ae","retinaScale","af","clearCanvas","ag","setsEqual","ah","_elementsEqual","ai","_isClickEvent","aj","_isBetween","ak","_readValueToProps","al","_updateBezierControlPoints","am","_computeSegments","an","_boundSegments","ao","_steppedInterpolation","ap","_bezierInterpolation","aq","_pointInLine","ar","_steppedLineTo","as","_bezierCurveTo","at","drawPoint","au","addRoundedRectPath","av","toTRBL","aw","toTRBLCorners","ax","_boundSegment","ay","_normalizeAngle","az","getRtlAdapter","aA","overrideTextDirection","aB","_textX","aC","restoreTextDirection","aD","drawPointLegend","aE","distanceBetweenPoints","aF","noop","aG","_setMinAndMaxByKey","aH","niceNum","aI","almostWhole","aJ","almostEquals","aK","_decimalPlaces","aL","Ticks","aM","log10","aN","_longestText","aO","_filterBetween","aP","_lookup","Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","call","window","_update","Date","now","remaining","running","items","length","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","top","right","bottom","left","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","new","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","sort","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","minX","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","controllers","__proto__","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","eventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lines","lineHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","title","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","valueAt","idx","pixel","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","subResolver","descriptorDefaults","resolverCache","hasFunction","isScriptable","isIndexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","tension","cubicInterpolationMode","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","interpolate","_interpolate","interpolated","capBezierPoints","inRange$1","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","fillText","strikethrough","textDirection","textWidth","setWidth","realX","fontLineHeight","calculateLegendItemHeight","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","formatters","numeric","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables","_adapters"],"sources":["C:/Users/1/Desktop/תכנות/עבודה/corona-details/node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.3.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.3.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}